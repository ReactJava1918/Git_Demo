package com.codewithsiva.fullstackbackend.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.codewithsiva.fullstackbackend.exception.UserNotFoundException;
import com.codewithsiva.fullstackbackend.model.RegUsers;
import com.codewithsiva.fullstackbackend.repository.RegUsersRepository;


@RestController
//@CrossOrigin("http://localhost:3000")
public class RegUserController {

    

     @Autowired
     private  RegUsersRepository  regUsersRepository;

    @GetMapping("/regusers")
    List<RegUsers> getAllUsers() {
    	System.out.println("cntrl entered here...........");
        return regUsersRepository.findAll();
    }

    @GetMapping("/regusers/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #id == principal.id)")
    RegUsers getUserById(@PathVariable Long id) {
        return regUsersRepository.findById(id)
                .orElseThrow(() -> new UserNotFoundException(id));
    }

    @PutMapping("/regusers/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #id == principal.id)")
    RegUsers updateRegUsers(@RequestBody RegUsers regUsers, @PathVariable Long id) {
        return regUsersRepository.findById(id)
                .map(regUserDb -> {
                	regUserDb.setFirstName(regUsers.getFirstName());
                	regUserDb.setLastName(regUsers.getLastName());
                	regUserDb.setEmail(regUsers.getEmail());
                	regUserDb.setPassword(regUsers.getPassword());
                    return regUsersRepository.save(regUserDb);
                }).orElseThrow(() -> new UserNotFoundException(id));
    }

    @DeleteMapping("/regusers/{id}")
    @PreAuthorize("hasRole('ROLE_ADMIN') or (hasRole('ROLE_USER') and #id == principal.id)")
    String deleteUser(@PathVariable Long id){
        if(!regUsersRepository.existsById(id)){
            throw new UserNotFoundException(id);
        }
        regUsersRepository.deleteById(id);
        return  "User with id "+id+" has been deleted success.";
    }



}
